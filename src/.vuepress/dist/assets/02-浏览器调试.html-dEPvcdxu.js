import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as n}from"./app-CFFpmDzR.js";const l="/assets/130-CFOa36by.png",e="/assets/131-DnOSi8KO.png",h="/assets/132-FHDmd1k7.png",t="/assets/133-CxZHe0I6.png",p={},k=n(`<h2 id="js调试技巧" tabindex="-1"><a class="header-anchor" href="#js调试技巧"><span><code>js</code>调试技巧</span></a></h2><p><strong>学习目标:</strong></p><ol><li>熟悉 开发者工具的使用</li><li>熟悉 代码断点的方式</li><li>熟悉 网页 debugger 实现方式</li></ol><h3 id="一-浏览器开发者工具" tabindex="-1"><a class="header-anchor" href="#一-浏览器开发者工具"><span>一. 浏览器开发者工具</span></a></h3><h4 id="_1-元素面板" tabindex="-1"><a class="header-anchor" href="#_1-元素面板"><span>1. 元素面板</span></a></h4><ul><li>展示浏览器渲染之后的页面</li></ul><h4 id="_2-网络面板" tabindex="-1"><a class="header-anchor" href="#_2-网络面板"><span>2. 网络面板</span></a></h4><ul><li>浏览器请求的数据都会加载在网络面板</li></ul><h4 id="_3-控制台面板" tabindex="-1"><a class="header-anchor" href="#_3-控制台面板"><span>3. 控制台面板</span></a></h4><ul><li>可以在控制台调试你对应的代码</li></ul><h4 id="_3-源代码面板" tabindex="-1"><a class="header-anchor" href="#_3-源代码面板"><span>3.源代码面板</span></a></h4><ul><li>网页:当前网站加载的源代码位置</li><li>工作区:用不到,前端工程师会用</li><li>替换:替换网站代码信息,访问网站的时候,就是走的自己替换的文件</li><li>代码段:可以编写测试代码</li></ul><h4 id="_4-应用面板" tabindex="-1"><a class="header-anchor" href="#_4-应用面板"><span>4. 应用面板</span></a></h4><ul><li>用来查看和删除 cookie 信息</li></ul><h3 id="二-断点讲解" tabindex="-1"><a class="header-anchor" href="#二-断点讲解"><span>二. 断点讲解</span></a></h3><h4 id="_1-什么是断点" tabindex="-1"><a class="header-anchor" href="#_1-什么是断点"><span>1. 什么是断点</span></a></h4><ul><li>开发人员可以通过在源代码中设置断点来控制程序执行流程。一旦程序执行到设置的断点位置，它就会在那里暂停，使得开发人员可以逐步执行代码、观察变量的值，并进行其他调试操作。</li><li>他的作用是可以帮助我们去定位数据加密的位置.</li></ul><h4 id="_2-断点方法" tabindex="-1"><a class="header-anchor" href="#_2-断点方法"><span>2. 断点方法</span></a></h4><h5 id="_1-dom-事件断点定位加密" tabindex="-1"><a class="header-anchor" href="#_1-dom-事件断点定位加密"><span>1. DOM 事件断点定位加密</span></a></h5><ul><li>DOM 事件断点是在浏览器的开发者工具中提供的一种调试工具，用于暂停 JavaScript 执行当特定类型的 DOM 事件被触发时。</li><li>使用 DOM 事件断点，你可以指定在哪些 DOM 事件上设置断点，比如点击（click）、改变（change）、加载（load）等。一旦设置了 DOM 事件断点，当相应的事件被触发时，浏览器会自动在触发事件的 JavaScript 代码行上暂停执行，从而允许你检查当前的程序状态、变量值，以及执行堆栈信息等。</li><li>执行的比较靠前 距离加密函数比较远</li></ul><h5 id="_2-xhr断点定位加密" tabindex="-1"><a class="header-anchor" href="#_2-xhr断点定位加密"><span>2. <code>XHR</code>断点定位加密</span></a></h5><ul><li><code>XHR</code>断点是在浏览器的开发者工具中设置的一种调试工具，用于在进行<code>XMLHttpRequest（XHR也就是我们说的ajax请求）</code>请求时暂停 JavaScript 执行。</li><li>执行比较靠后 距离加密函数相对较近 可以根据栈快速定位</li><li><strong>注意</strong>：非<code>XHR</code>发送的就断不住</li></ul><h5 id="_3-网站加载时间轴" tabindex="-1"><a class="header-anchor" href="#_3-网站加载时间轴"><span>3. 网站加载时间轴</span></a></h5><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>加载Hmtl - 加载JS - 运行JS初始化 - 用户触发某个事件 - 调用某段JS - 加密函数 - 给服务器发信息（XHR-SEND） - 接收到服务器数据 - 解密函数(如果数据加密的话) - 刷新网页渲染</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="_4-断点示例" tabindex="-1"><a class="header-anchor" href="#_4-断点示例"><span>4. 断点示例</span></a></h5><ul><li>网址:https://oauth.d.cn/auth/goLogin.html</li><li>关键字定位</li><li>跳过子函数（次态函数）执行（只在主函数内一步一步执行，不进入子函数内部）</li><li>进入子函数（次态函数）执行（在主函数内部一步一步执行，如果遇到子函数，会跳转到子函数内部一步一步执行）</li><li>跳出当前函数，回到调用位置</li><li>单步执行，会进入到函数内部 更加的细致</li><li>屏蔽断点</li></ul><h3 id="三-方法栈" tabindex="-1"><a class="header-anchor" href="#三-方法栈"><span>三. 方法栈</span></a></h3><p><strong>栈是一种先进后出的特殊线性表结构</strong></p><p>调用栈是解析器的一种机制，可以在脚本调用多个函数时，通过这种机制，我们能够追踪到哪个函数正在执行，执行的函数体又调用了哪个函数。</p><ul><li>当脚本要调用一个函数时，解析器把该函数添加到栈中并且执行这个函数。</li><li>任何被这个函数调用的函数会进一步添加到调用栈中，并且运行到它们被上个程序调用的位置。</li><li>当函数运行结束后，解释器将它从堆栈中取出，并在主代码列表中继续执行代码。</li></ul><h4 id="_1-代码说明" tabindex="-1"><a class="header-anchor" href="#_1-代码说明"><span>1. 代码说明</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> cc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;调用的cc函数&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> bb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    cc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;调用的bb函数&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> aa</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    bb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;调用的aa函数&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">aa</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-案例" tabindex="-1"><a class="header-anchor" href="#_2-案例"><span>2. 案例</span></a></h4><ul><li>网址:https://oauth.d.cn/auth/goLogin.html</li><li><code>xhr</code>断点调试看栈</li></ul><h3 id="四-debugger-原理" tabindex="-1"><a class="header-anchor" href="#四-debugger-原理"><span>四. debugger 原理</span></a></h3><h4 id="_1-示范样例" tabindex="-1"><a class="header-anchor" href="#_1-示范样例"><span>1. 示范样例</span></a></h4><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;!</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DOCTYPE</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> html</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">html</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> lang</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;en&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">head</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> charset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;UTF-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">title</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Title&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">title</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">head</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;box&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ss</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getElementById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;box&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ff</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        debugger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      setInterval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">ff</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      ss</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">innerHTML</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;大家晚上好&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">html</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-浏览器过-debugger" tabindex="-1"><a class="header-anchor" href="#_2-浏览器过-debugger"><span>2. 浏览器过 debugger</span></a></h4><ul><li>不再此处暂停 <ul><li>鼠标右击代码行号,一律不再此处暂停</li></ul></li></ul><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>编辑断点 <ul><li>当定义器运行到这个<code>debugger</code>这个代码的时候，那么这个时候它为<code>true</code>，它肯定执行我们的<code>debugger</code>代码，那我们可以用浏览器的功能给他改成<code>false</code></li><li>鼠标右击行号,添加条件断点,添加一个不成立的条件</li><li>写个 1===0 的先验条件，永远为假，就永远不会进入这个断点了。</li></ul></li></ul><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-方法置空过-debugger" tabindex="-1"><a class="header-anchor" href="#_3-方法置空过-debugger"><span>3. 方法置空过 debugger</span></a></h4><ul><li>无限 debugger 产生的原因是第七行代码<code>ff</code>这个函数造成的,所以我们可以重写这个函数,使无限 debugger 失效.在控制台中输入<code>function ff(){}</code>即可</li><li>注：一定要在 debugger 进入之前</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>setInterval = function(){}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-替换文件过-debugger" tabindex="-1"><a class="header-anchor" href="#_4-替换文件过-debugger"><span>4. 替换文件过 debugger</span></a></h4><ul><li>把<code>JS</code>文件保存到本地修改，修改范围主要是将 debugger 相关的代码删除或者改写，可以使用文件替换方式</li><li>用 pycharm 启动的文件,后缀需要删除掉</li></ul><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_5-注入代码过-debugger" tabindex="-1"><a class="header-anchor" href="#_5-注入代码过-debugger"><span>5. 注入代码过 debugger</span></a></h4><ul><li>在控制台注入代码</li><li>网址:https://www.spolicy.com/</li><li>这样的网站,鼠标右击的方式替换网站会非常的卡,他会不断异步的去创建文件,把浏览器的资源都占用</li><li>constructor: 构造函数</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[f(357, &quot;flU7&quot;, 0, 148) + p(416, 0, &quot;GoXF&quot;) + &quot;r&quot;](c[l(167, 377, &quot;LwY)&quot;)](c[t(-204, 0, 0, -71, &quot;%g*t&quot;)], c[p(289, 0, &quot;LQO2&quot;)]))[a(453, 0, &quot;k4Oq&quot;, 263)](c[p(462, 0, &quot;#x1a&quot;)])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>这行代码创建的 debugger,那么我们可以根据 JavaScript 的特点把他的这个方法改写一下</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>var _constructor = constructor;</span></span>
<span class="line"><span>Function.prototype.constructor = function(s) {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if ( s== &quot;debugger&quot;) {</span></span>
<span class="line"><span>        console.log(s);</span></span>
<span class="line"><span>        return null;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    return _constructor(s);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>有调用 constructor 方法我们判断他传递的参数是不是 debugger,要是 debugger 的话就把这个方法改写,要不是的话就是用源方法返回</li></ul>`,55),d=[k];function r(g,c){return a(),s("div",null,d)}const A=i(p,[["render",r],["__file","02-浏览器调试.html.vue"]]),u=JSON.parse('{"path":"/python/2.%E7%88%AC%E8%99%AB/2.js%E9%80%86%E5%90%91/02-%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95.html","title":"02-浏览器调试","lang":"zh-CN","frontmatter":{"title":"02-浏览器调试","footer":false,"prev":false,"next":false,"description":"js调试技巧 学习目标: 熟悉 开发者工具的使用 熟悉 代码断点的方式 熟悉 网页 debugger 实现方式 一. 浏览器开发者工具 1. 元素面板 展示浏览器渲染之后的页面 2. 网络面板 浏览器请求的数据都会加载在网络面板 3. 控制台面板 可以在控制台调试你对应的代码 3.源代码面板 网页:当前网站加载的源代码位置 工作区:用不到,前端工程师会...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/python/2.%E7%88%AC%E8%99%AB/2.js%E9%80%86%E5%90%91/02-%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"02-浏览器调试"}],["meta",{"property":"og:description","content":"js调试技巧 学习目标: 熟悉 开发者工具的使用 熟悉 代码断点的方式 熟悉 网页 debugger 实现方式 一. 浏览器开发者工具 1. 元素面板 展示浏览器渲染之后的页面 2. 网络面板 浏览器请求的数据都会加载在网络面板 3. 控制台面板 可以在控制台调试你对应的代码 3.源代码面板 网页:当前网站加载的源代码位置 工作区:用不到,前端工程师会..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"YL"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02-浏览器调试\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"YL\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"js调试技巧","slug":"js调试技巧","link":"#js调试技巧","children":[{"level":3,"title":"一. 浏览器开发者工具","slug":"一-浏览器开发者工具","link":"#一-浏览器开发者工具","children":[]},{"level":3,"title":"二. 断点讲解","slug":"二-断点讲解","link":"#二-断点讲解","children":[]},{"level":3,"title":"三. 方法栈","slug":"三-方法栈","link":"#三-方法栈","children":[]},{"level":3,"title":"四. debugger 原理","slug":"四-debugger-原理","link":"#四-debugger-原理","children":[]}]}],"git":{},"readingTime":{"minutes":5.19,"words":1556},"filePathRelative":"python/2.爬虫/2.js逆向/02-浏览器调试.md","autoDesc":true}');export{A as comp,u as data};
